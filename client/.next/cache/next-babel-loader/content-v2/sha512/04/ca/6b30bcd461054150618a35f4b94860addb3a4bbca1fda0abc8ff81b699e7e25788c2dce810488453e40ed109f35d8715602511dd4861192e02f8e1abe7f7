{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Shital.r.bavikar/dev/reactjs/demo/next-apollo-demo/client/components/Spinner/Spinner.tsx\",\n    _this = this;\n\nimport styles from './Spinner.module.css';\nexport var Spinner = function Spinner() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.spinnerContainer,\n    children: /*#__PURE__*/_jsxDEV(\"i\", {\n      className: \"fa fa-circle-o-notch fa-spin fa-2x\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 9\n  }, _this);\n};\n_c2 = Spinner;\n_c = Spinner;\n\nvar _c;\n\n$RefreshReg$(_c, \"Spinner\");\n;\n\nvar _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n// to extract CSS. For backwards compatibility, we need to check we're in a\n// browser context before continuing.\n\n\nif (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n'$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n  // templating and execution.\n\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id); // A module can be accepted automatically based on its exports, e.g. when\n  // it is a Refresh Boundary.\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    // Save the previous exports on update so we can compare the boundary\n    // signatures.\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    }); // Unconditionally accept an update to this module, we'll check if it's\n    // still a Refresh Boundary later.\n\n    module.hot.accept(); // This field is set when the previous version of this module was a\n    // Refresh Boundary, letting us know we need to check for invalidation or\n    // enqueue an update.\n\n    if (prevExports !== null) {\n      // A boundary can become ineligible if its exports are incompatible\n      // with the previous exports.\n      //\n      // For example, if you add/remove/change exports, we'll want to\n      // re-execute the importing modules, and force those components to\n      // re-render. Similarly, if you convert a class component to a\n      // function, we want to invalidate the boundary.\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    // Since we just executed the code for the module, it's possible that the\n    // new exports made it ineligible for being a boundary.\n    // We only care about the case when we were _previously_ a boundary,\n    // because we already accepted this update (accidental side effect).\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}\n\nvar _c2;\n\n$RefreshReg$(_c2, \"Spinner\");","map":{"version":3,"sources":["/Users/Shital.r.bavikar/dev/reactjs/demo/next-apollo-demo/client/components/Spinner/Spinner.tsx"],"names":["Spinner","styles"],"mappings":";;;;;AACA,OAAA,MAAA,MAAA,sBAAA;AAEA,OAAO,IAAMA,OAAO,GAAG,SAAVA,OAAU,GAAM;AACzB,SAAA,aACI,OAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAEC,MAAM,CAAtB,gBAAA;AAAA,IAAA,QAAA,EAAA,aACI,OAAA,CAAA,GAAA,EAAA;AAAG,MAAA,SAAS,EAAC;AAAb,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA,CAAA;AAAA,MAAA,YAAA,EAAA;AAAA,KAAA,EAAA,KAAA;AADJ,GAAA,EAAA,KAAA,CAAA,EAAA,KAAA,EAAA;AAAA,IAAA,QAAA,EAAA,YAAA;AAAA,IAAA,UAAA,EAAA,CAAA;AAAA,IAAA,YAAA,EAAA;AAAA,GAAA,EADJ,KACI,CADJ;AADG,CAAA;MAAMD,O;KAAAA,O","sourcesContent":["import * as React from 'react';\nimport styles from './Spinner.module.css';\n\nexport const Spinner = () => {\n    return (\n        <div className={styles.spinnerContainer}>\n            <i className=\"fa fa-circle-o-notch fa-spin fa-2x\" />\n        </div>\n    );\n};\n\n"]},"metadata":{},"sourceType":"module"}